{"version":3,"file":"0.3363616a3c4fb56c9b26.hot-update.js","sources":["/Users/jorgeivansandovalhoyos/video-player/packages/server/src/index.ts","/Users/jorgeivansandovalhoyos/video-player/packages/server/src/server.ts","external \"graphql\"","external \"subscriptions-transport-ws\""],"sourcesContent":["import { Server } from 'http';\n\nimport startServer from './server';\n\ntry {\n  const PORT = 8080;\n\n  let server: Server;\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(data => {\n      if (server) {\n        server.close();\n      }\n      data.reloaded = true;\n    });\n  }\n\n  startServer(PORT).then(serverInstance => {\n    if (!module.hot || !module.hot.data) {\n      console.log(`GraphQL Server is now running on http://localhost:${PORT}`);\n    }\n    server = serverInstance;\n  });\n} catch (e) {\n  console.error(e);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { graphiqlExpress, graphqlExpress } from 'apollo-server-express';\nimport * as bodyParser from 'body-parser';\nimport * as cors from 'cors';\nimport * as express from 'express';\n\nimport schema from './schema';\n\nimport { execute, subscribe } from 'graphql';\nimport { createServer, Server } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\n\nexport default async (port: number): Promise<Server> => {\n  const app = express();\n\n  const server: Server = createServer(app);\n\n  app.use('*', cors({ origin: 'http://localhost:3000' }));\n\n  app.use(\n    '/graphql',\n    bodyParser.json(),\n    graphqlExpress({\n      schema\n    })\n  );\n\n  if (module.hot) {\n    app.use(\n      '/graphiql',\n      graphiqlExpress({\n        endpointURL: '/graphql',\n        subscriptionsEndpoint: `ws://localhost:${port}/subscriptions`,\n        // tslint:disable-next-line\n        query:\n          '# Welcome to your own GraphQL server!\\n#\\n' +\n          '# Press Play button above to execute GraphQL query\\n#\\n' +\n          '# You can start editing source code and see results immediately\\n\\n' +\n          'query hello($subject:String) {\\n  hello(subject: $subject)\\n}\\n\\n' +\n          'query Clips {\\n  clips{id, name, start, end} \\n}\\n\\n' +\n          'mutation DeleteClip($id:ID!) {\\n  deleteClip(id:$id) \\n}\\n\\n' +\n          'mutation SaveClip($id:ID, $name: String, $start: Int, $end: Int) {\\n' +\n          '  saveClip(id:$id, name:$name, start:$start, end:$end) {\\n' +\n          '    id, name, start, end\\n' +\n          '  }\\n' +\n          '}\\n',\n        variables: { subject: 'World' }\n      })\n    );\n  }\n\n  return new Promise<Server>(resolve => {\n    server.listen(port, () => {\n      // tslint:disable-next-line\n      new SubscriptionServer(\n        {\n          execute,\n          subscribe,\n          // tslint:disable-next-line\n          schema\n        },\n        {\n          server,\n          // tslint:disable-next-line\n          path: '/subscriptions'\n        }\n      );\n      resolve(server);\n    });\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/server.ts","module.exports = require(\"graphql\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql\"\n// module id = graphql\n// module chunks = 0","module.exports = require(\"subscriptions-transport-ws\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"subscriptions-transport-ws\"\n// module id = subscriptions-transport-ws\n// module chunks = 0"],"mappings":";;;;;;;;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;AACA;AAEA;AAEA;AAEA;AAIA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;;;;;;;;ACrEA;;;;;;;ACAA;;;;A","sourceRoot":""}